/************************************************************************
//  工具自动生成的协议类型定义代码(UTF-8 With BOM)
//  File Name:    EventCenter.cpp
//  Purpose:      游戏事件枚举
//  Copyright (c) 2010-2020 上海恺英网络科技有限公司, All rights reserved.
*************************************************************************/

#include "UtilFunc.h"
#include "EventCenter.h"
#include "SessionMgr.h"

#ifdef _WIN32
#pragma warning(disable:4700)
#endif

namespace NEventCenter
{

#ifdef PROT_USE_XML

const char* EnumValToStr(EventType e)
{
	switch(e)
	{
	case eEventType_PlayerLogin:
		return "eEventType_PlayerLogin";
	case eEventType_GetResource:
		return "eEventType_GetResource";
	case eEventType_SpendResource:
		return "eEventType_SpendResource";
	case eEventType_PackExpand:
		return "eEventType_PackExpand";
	case eEventType_PackItemSold:
		return "eEventType_PackItemSold";
	case eEventType_PackArrange:
		return "eEventType_PackArrange";
	case eEventType_AchievementLevelUp:
		return "eEventType_AchievementLevelUp";
	case eEventType_AchievementGet:
		return "eEventType_AchievementGet";
	case eEventType_PlayerLevelChanging:
		return "eEventType_PlayerLevelChanging";
	case eEventType_DungeonEnter:
		return "eEventType_DungeonEnter";
	case eEventType_DungeonFinish:
		return "eEventType_DungeonFinish";
	case eEventType_DungeonLeave:
		return "eEventType_DungeonLeave";
	case eEventType_DungeonAutoFight:
		return "eEventType_DungeonAutoFight";
	case eEventType_DungeonStarGet:
		return "eEventType_DungeonStarGet";
	case eEventType_DungeonBattleWin:
		return "eEventType_DungeonBattleWin";
	case eEventType_DungeonFinishAndAuto:
		return "eEventType_DungeonFinishAndAuto";
	case eEventType_DungeonStar:
		return "eEventType_DungeonStar";
	case eEventType_DungeonFinishType:
		return "eEventType_DungeonFinishType";
	case eEventType_DungeonVsMonster:
		return "eEventType_DungeonVsMonster";
	case eEventType_DungeonFightMonster:
		return "eEventType_DungeonFightMonster";
	case eEventType_DivisionFinish:
		return "eEventType_DivisionFinish";
	case eEventType_DivisionRefresh:
		return "eEventType_DivisionRefresh";
	case eEventType_DivisionRefreshGet:
		return "eEventType_DivisionRefreshGet";
	case eEventType_DivisionBuying:
		return "eEventType_DivisionBuying";
	case eEventType_DivisionLevelUp:
		return "eEventType_DivisionLevelUp";
	case eEventType_DivisionPrizeGet:
		return "eEventType_DivisionPrizeGet";
	case eEventType_GovernmentTaskFinish:
		return "eEventType_GovernmentTaskFinish";
	case eEventType_GovernmentTaskRefresh:
		return "eEventType_GovernmentTaskRefresh";
	case eEventType_GovernmentTaskRefreshGet:
		return "eEventType_GovernmentTaskRefreshGet";
	case eEventType_GovernmentTaskBuying:
		return "eEventType_GovernmentTaskBuying";
	case eEventType_GovernmentTaskLevelUp:
		return "eEventType_GovernmentTaskLevelUp";
	case eEventType_GovernmentTaskPrizeGet:
		return "eEventType_GovernmentTaskPrizeGet";
	case eEventType_GuildCreation:
		return "eEventType_GuildCreation";
	case eEventType_GuildJoining:
		return "eEventType_GuildJoining";
	case eEventType_GuildDismiss:
		return "eEventType_GuildDismiss";
	case eEventType_GuildQuit:
		return "eEventType_GuildQuit";
	case eEventType_GuildSetQQ:
		return "eEventType_GuildSetQQ";
	case eEventType_GuildAccuse:
		return "eEventType_GuildAccuse";
	case eEventType_GuildLevel:
		return "eEventType_GuildLevel";
	case eEventType_GuildDonate:
		return "eEventType_GuildDonate";
	case eEventType_GuildBuildingUpgrade:
		return "eEventType_GuildBuildingUpgrade";
	case eEventType_GuildOblation:
		return "eEventType_GuildOblation";
	case eEventType_GuildOblationSelf:
		return "eEventType_GuildOblationSelf";
	case eEventType_GuildShopBought:
		return "eEventType_GuildShopBought";
	case eEventType_GuildSkillUpgrade:
		return "eEventType_GuildSkillUpgrade";
	case eEventType_RankFightingPowerChanging:
		return "eEventType_RankFightingPowerChanging";
	case eEventType_RankPetChanging:
		return "eEventType_RankPetChanging";
	case eEventType_RankFighterChanging:
		return "eEventType_RankFighterChanging";
	case eEventType_RankTrumpChanging:
		return "eEventType_RankTrumpChanging";
	case eEventType_PlayerProstrate:
		return "eEventType_PlayerProstrate";
	case eEventType_ReceiveProstrate:
		return "eEventType_ReceiveProstrate";
	case eEventType_ExperienceChallenge:
		return "eEventType_ExperienceChallenge";
	case eEventType_ExperienceSectionChanging:
		return "eEventType_ExperienceSectionChanging";
	case eEventType_ExperienceRefresh:
		return "eEventType_ExperienceRefresh";
	case eEventType_ExperienceTimesBought:
		return "eEventType_ExperienceTimesBought";
	case eEventType_ExperienceGetVictory:
		return "eEventType_ExperienceGetVictory";
	case eEventType_ExperienceGetPrize:
		return "eEventType_ExperienceGetPrize";
	case eEventType_ExperienceLevelChange:
		return "eEventType_ExperienceLevelChange";
	case eEventType_ArenaRankChanging:
		return "eEventType_ArenaRankChanging";
	case eEventType_ArenaChallenge:
		return "eEventType_ArenaChallenge";
	case eEventType_ArenaGetVictory:
		return "eEventType_ArenaGetVictory";
	case eEventType_ArenaCancelRankBridge:
		return "eEventType_ArenaCancelRankBridge";
	case eEventType_ArenaGetPrize:
		return "eEventType_ArenaGetPrize";
	case eEventType_ArenaRankDwon:
		return "eEventType_ArenaRankDwon";
	case eEventType_ArenaRank:
		return "eEventType_ArenaRank";
	case eEventType_ArenaBestRank:
		return "eEventType_ArenaBestRank";
	case eEventType_TeamBattleVictory:
		return "eEventType_TeamBattleVictory";
	case eEventType_DemonTowerBattle:
		return "eEventType_DemonTowerBattle";
	case eEventType_DemonTowerHighestChanging:
		return "eEventType_DemonTowerHighestChanging";
	case eEventType_DemonTowerDefendSuccess:
		return "eEventType_DemonTowerDefendSuccess";
	case eEventType_DemonTowerRobSuccess:
		return "eEventType_DemonTowerRobSuccess";
	case eEventType_DemonTowerGetPrize:
		return "eEventType_DemonTowerGetPrize";
	case eEventType_DemonTowerRob:
		return "eEventType_DemonTowerRob";
	case eEventType_DemonTowerClearPVECD:
		return "eEventType_DemonTowerClearPVECD";
	case eEventType_DemonTowerClearPVPCD:
		return "eEventType_DemonTowerClearPVPCD";
	case eEventType_HolyLandJoin:
		return "eEventType_HolyLandJoin";
	case eEventType_HolyLandQuit:
		return "eEventType_HolyLandQuit";
	case eEventType_HolyLandUseItem:
		return "eEventType_HolyLandUseItem";
	case eEventType_WorldBossEnter:
		return "eEventType_WorldBossEnter";
	case eEventType_WorldBossKill:
		return "eEventType_WorldBossKill";
	case eEventType_WorldBossInspire:
		return "eEventType_WorldBossInspire";
	case eEventType_WorldBossAttack:
		return "eEventType_WorldBossAttack";
	case eEventType_WorldBossAttackRightNow:
		return "eEventType_WorldBossAttackRightNow";
	case eEventType_WorldBossBuyLive:
		return "eEventType_WorldBossBuyLive";
	case eEventType_ShushanBattleJoin:
		return "eEventType_ShushanBattleJoin";
	case eEventType_ShushanBattleQuit:
		return "eEventType_ShushanBattleQuit";
	case eEventType_ShushanBattleVictory:
		return "eEventType_ShushanBattleVictory";
	case eEventType_ShushanBattleSkillUsing:
		return "eEventType_ShushanBattleSkillUsing";
	case eEventType_ShushanBattleTaskFinish:
		return "eEventType_ShushanBattleTaskFinish";
	case eEventType_ShushanBattleWinStreak:
		return "eEventType_ShushanBattleWinStreak";
	case eEventType_ShushanBattleBadgeUpgrade:
		return "eEventType_ShushanBattleBadgeUpgrade";
	case eEventType_ShushanBattleGetPrize:
		return "eEventType_ShushanBattleGetPrize";
	case eEventType_GuildBattleSignUp:
		return "eEventType_GuildBattleSignUp";
	case eEventType_GuildBattleOneRoundEnd:
		return "eEventType_GuildBattleOneRoundEnd";
	case eEventType_GuildBattleEnd:
		return "eEventType_GuildBattleEnd";
	case eEventType_GuildBattleInspire:
		return "eEventType_GuildBattleInspire";
	case eEventType_GuildBattleWeekendEnd:
		return "eEventType_GuildBattleWeekendEnd";
	case eEventType_GuildBattleWin:
		return "eEventType_GuildBattleWin";
	case eEventType_GuildBattleComboKill:
		return "eEventType_GuildBattleComboKill";
	case eEventType_GuildBattleJoin:
		return "eEventType_GuildBattleJoin";
	case eEventType_FightingPowerChanging:
		return "eEventType_FightingPowerChanging";
	case eEventType_FightingPowerChangingPlayer:
		return "eEventType_FightingPowerChangingPlayer";
	case eEventType_FightingPowerChangingAnyFigher:
		return "eEventType_FightingPowerChangingAnyFigher";
	case eEventType_FriendAdding:
		return "eEventType_FriendAdding";
	case eEventType_FriendRecommendUsing:
		return "eEventType_FriendRecommendUsing";
	case eEventType_FriendSignatureChangings:
		return "eEventType_FriendSignatureChangings";
	case eEventType_VipLevelChanging:
		return "eEventType_VipLevelChanging";
	case eEventType_VipRechargeSuccess:
		return "eEventType_VipRechargeSuccess";
	case eEventType_VipConsumptionSuccess:
		return "eEventType_VipConsumptionSuccess";
	case eEventType_VipGetPrize:
		return "eEventType_VipGetPrize";
	case eEventType_VipGetPrizeMore:
		return "eEventType_VipGetPrizeMore";
	case eEventType_ActiveValueGetPrize:
		return "eEventType_ActiveValueGetPrize";
	case eEventType_ActivePointGet:
		return "eEventType_ActivePointGet";
	case eEventType_FightingPowerComparing:
		return "eEventType_FightingPowerComparing";
	case eEventType_MallBought:
		return "eEventType_MallBought";
	case eEventType_MallBoughtMomey:
		return "eEventType_MallBoughtMomey";
	case eEventType_ExChangingMallBought:
		return "eEventType_ExChangingMallBought";
	case eEventType_SettingsChanging:
		return "eEventType_SettingsChanging";
	case eEventType_SettingsFastShield:
		return "eEventType_SettingsFastShield";
	case eEventType_SettingsFullScreen:
		return "eEventType_SettingsFullScreen";
	case eEventType_WorldMapMoving:
		return "eEventType_WorldMapMoving";
	case eEventType_MailReading:
		return "eEventType_MailReading";
	case eEventType_MailReceiving:
		return "eEventType_MailReceiving";
	case eEventType_SkillLearning:
		return "eEventType_SkillLearning";
	case eEventType_SkillEquiping:
		return "eEventType_SkillEquiping";
	case eEventType_SkillUpgrade:
		return "eEventType_SkillUpgrade";
	case eEventType_EquipmentStrengthening:
		return "eEventType_EquipmentStrengthening";
	case eEventType_EquipmentForging:
		return "eEventType_EquipmentForging";
	case eEventType_TrumpActive:
		return "eEventType_TrumpActive";
	case eEventType_TrumpEquiping:
		return "eEventType_TrumpEquiping";
	case eEventType_TrumpForging:
		return "eEventType_TrumpForging";
	case eEventType_FighterEnlisted:
		return "eEventType_FighterEnlisted";
	case eEventType_FighterLevelUp:
		return "eEventType_FighterLevelUp";
	case eEventType_FighterCuiTi:
		return "eEventType_FighterCuiTi";
	case eEventType_FighterSkillUpgrade:
		return "eEventType_FighterSkillUpgrade";
	case eEventType_FighterSkillExchange:
		return "eEventType_FighterSkillExchange";
	case eEventType_FighterLearningRecipe:
		return "eEventType_FighterLearningRecipe";
	case eEventType_FighterRecipeUpgrade:
		return "eEventType_FighterRecipeUpgrade";
	case eEventType_FormationActive:
		return "eEventType_FormationActive";
	case eEventType_FormationChange:
		return "eEventType_FormationChange";
	case eEventType_PetActive:
		return "eEventType_PetActive";
	case eEventType_PetGetFighting:
		return "eEventType_PetGetFighting";
	case eEventType_FighterBatterPoint:
		return "eEventType_FighterBatterPoint";
	case eEventType_FighterCollected:
		return "eEventType_FighterCollected";
	case eEventType_FighterStarCollected:
		return "eEventType_FighterStarCollected";
	case eEventType_FighterInBattle:
		return "eEventType_FighterInBattle";
	case eEventType_FormationChangeMore:
		return "eEventType_FormationChangeMore";
	case eEventType_FighterCombinationUnlock:
		return "eEventType_FighterCombinationUnlock";
	case eEventType_PetUpgrade:
		return "eEventType_PetUpgrade";
	case eEventType_BeastSoulActive:
		return "eEventType_BeastSoulActive";
	case eEventType_BeastUpgrade:
		return "eEventType_BeastUpgrade";
	case eEventType_BeastSoulGet:
		return "eEventType_BeastSoulGet";
	case eEventType_HorseActive:
		return "eEventType_HorseActive";
	case eEventType_HorseGetUsed:
		return "eEventType_HorseGetUsed";
	case eEventType_HorseUpgrade:
		return "eEventType_HorseUpgrade";
	case eEventType_PlayerLearningRecipe:
		return "eEventType_PlayerLearningRecipe";
	case eEventType_PlayerEquipingRecipe:
		return "eEventType_PlayerEquipingRecipe";
	case eEventType_PlayerRecipeUpgrade:
		return "eEventType_PlayerRecipeUpgrade";
	case eEventType_PlayerDujieSuccess:
		return "eEventType_PlayerDujieSuccess";
	case eEventType_OnlineTime:
		return "eEventType_OnlineTime";
	case eEventType_FaionActive:
		return "eEventType_FaionActive";
	case eEventType_FaionGetUsed:
		return "eEventType_FaionGetUsed";
	case eEventType_FaionUpgrade:
		return "eEventType_FaionUpgrade";
	case eEventType_StoveFireLearning:
		return "eEventType_StoveFireLearning";
	case eEventType_StoveFireFinish:
		return "eEventType_StoveFireFinish";
	case eEventType_StoveUpgrade:
		return "eEventType_StoveUpgrade";
	case eEventType_StovePlayerHelp:
		return "eEventType_StovePlayerHelp";
	case eEventType_StoveFighterHelp:
		return "eEventType_StoveFighterHelp";
	case eEventType_StoveBellow:
		return "eEventType_StoveBellow";
	case eEventType_StoveComingIn:
		return "eEventType_StoveComingIn";
	case eEventType_StoveFireStarting:
		return "eEventType_StoveFireStarting";
	case eEventType_NewPlayerTask:
		return "eEventType_NewPlayerTask";
	case eEventType_NewPlayerClient:
		return "eEventType_NewPlayerClient";
	case eEventType_CircleTaskFinish:
		return "eEventType_CircleTaskFinish";
	case eEventType_CircleTaskStarUp:
		return "eEventType_CircleTaskStarUp";
	case eEventType_TravelFinish:
		return "eEventType_TravelFinish";
	case eEventType_GuardEmeiFinish:
		return "eEventType_GuardEmeiFinish";
	case eEventType_GuardEmeiFinishMore:
		return "eEventType_GuardEmeiFinishMore";
	case eEventType_QQAlarmClock:
		return "eEventType_QQAlarmClock";
	case eEventType_BeautyUnlock:
		return "eEventType_BeautyUnlock";
	case eEventType_BeautyUnlockNum:
		return "eEventType_BeautyUnlockNum";
	case eEventType_BeautyHug:
		return "eEventType_BeautyHug";
	case eEventType_BeautySend:
		return "eEventType_BeautySend";
	case eEventType_BeautySendAppreciate:
		return "eEventType_BeautySendAppreciate";
	case eEventType_BeautyLevelUp:
		return "eEventType_BeautyLevelUp";
	case eEventType_BattleArraySuccess:
		return "eEventType_BattleArraySuccess";
	case eEventType_BattleArraySuccessInfo:
		return "eEventType_BattleArraySuccessInfo";
	case eEventType_TreasureUseBuff:
		return "eEventType_TreasureUseBuff";
	case eEventType_TreasureSuccess:
		return "eEventType_TreasureSuccess";
	case eEventType_XinfaLearn:
		return "eEventType_XinfaLearn";
	case eEventType_XinfaLevelUp:
		return "eEventType_XinfaLevelUp";
	case eEventType_BoatFinish:
		return "eEventType_BoatFinish";
	case eEventType_BoatRefresh:
		return "eEventType_BoatRefresh";
	case eEventType_BoatRob:
		return "eEventType_BoatRob";
	case eEventType_BoatProtect:
		return "eEventType_BoatProtect";
	case eEventType_BoatBegin:
		return "eEventType_BoatBegin";
	case eEventType_BoatGet:
		return "eEventType_BoatGet";
	case eEventType_MoneyTree:
		return "eEventType_MoneyTree";
	case eEventType_LingMountainSeize:
		return "eEventType_LingMountainSeize";
	case eEventType_LingMountainJoin:
		return "eEventType_LingMountainJoin";
	case eEventType_LingMountainConquer:
		return "eEventType_LingMountainConquer";
	case eEventType_LingMountainWin:
		return "eEventType_LingMountainWin";
	case eEventType_GemsGet:
		return "eEventType_GemsGet";
	case eEventType_GemsSuit:
		return "eEventType_GemsSuit";
	case eEventType_GemsCompose:
		return "eEventType_GemsCompose";
	case eEventType_MysteryTreasureJoin:
		return "eEventType_MysteryTreasureJoin";
	case eEventType_MysteryTreasureBox:
		return "eEventType_MysteryTreasureBox";
	case eEventType_MysteryTreasureWin:
		return "eEventType_MysteryTreasureWin";
	case eEventType_MysteryTreasureMove:
		return "eEventType_MysteryTreasureMove";
	case eEventType_MysteryTreasureAliveTime:
		return "eEventType_MysteryTreasureAliveTime";
	case eEventType_MysteryTreasureReport:
		return "eEventType_MysteryTreasureReport";
	case eEventType_QuestionJoin:
		return "eEventType_QuestionJoin";
	case eEventType_QuestionUseSkill:
		return "eEventType_QuestionUseSkill";
	case eEventType_QuestionScore:
		return "eEventType_QuestionScore";
	case eEventType_SkyTreasureJoin:
		return "eEventType_SkyTreasureJoin";
	case eEventType_SkyTreasureGet:
		return "eEventType_SkyTreasureGet";
	case eEventType_PlayerDraw:
		return "eEventType_PlayerDraw";
	case eEventType_GetEnergy:
		return "eEventType_GetEnergy";
	case eEventType_CheckIn:
		return "eEventType_CheckIn";
	case eEventType_CheckInAdd:
		return "eEventType_CheckInAdd";
	case eEventType_CheckInGetPrize:
		return "eEventType_CheckInGetPrize";
	case eEventType_MonthCard:
		return "eEventType_MonthCard";
	case eEventType_MonthCardSend:
		return "eEventType_MonthCardSend";
	case eEventType_14DaysGift:
		return "eEventType_14DaysGift";
	case eEventType_YellowDiamondNum:
		return "eEventType_YellowDiamondNum";
	case eEventType_YellowDiamondGift:
		return "eEventType_YellowDiamondGift";
	case eEventType_SitDownTime:
		return "eEventType_SitDownTime";
	case eEventType_UsePromote:
		return "eEventType_UsePromote";
	case eEventType_QQAlarmGift:
		return "eEventType_QQAlarmGift";
	case eEventType_WeiBoGift:
		return "eEventType_WeiBoGift";
	case eEventType_WeChatGift:
		return "eEventType_WeChatGift";
	case eEventType_FriendInviteGift:
		return "eEventType_FriendInviteGift";
	case eEventType_XiHeTruck:
		return "eEventType_XiHeTruck";
	case eEventType_TrumpGet:
		return "eEventType_TrumpGet";
	case eEventType_TrumpEquip:
		return "eEventType_TrumpEquip";
	case eEventType_TrumpToStrongSucess:
		return "eEventType_TrumpToStrongSucess";
	case eEventType_TrumpToStrongFaild:
		return "eEventType_TrumpToStrongFaild";
	case eEventType_TrumpPu:
		return "eEventType_TrumpPu";
	case eEventType_TrumpDes:
		return "eEventType_TrumpDes";
	case eEventType_ItemUpgrade:
		return "eEventType_ItemUpgrade";
	case eEventType_ShenglingPlay:
		return "eEventType_ShenglingPlay";
	case eEventType_ShenglingControl:
		return "eEventType_ShenglingControl";
	case eEventType_ShenglingReturn:
		return "eEventType_ShenglingReturn";
	case eEventType_ShenglingThreeGameOver:
		return "eEventType_ShenglingThreeGameOver";
	case eEventType_ShenglingPuzzOver:
		return "eEventType_ShenglingPuzzOver";
	case eEventType_Max:
		return "eEventType_Max";
	default:
		return NULL;
	}
}

bool EnumStrToVal(const char* pszEnumStr, EventType& e)
{
	if(pszEnumStr == NULL)
	{
		LOG_CRI << "pszEnumStr is NULL!";
		return false;
	}
	static map<string, EventType> mapStr2Val;
	if(mapStr2Val.empty())
	{
		mapStr2Val.insert(make_pair("eEventType_PlayerLogin", eEventType_PlayerLogin));
		mapStr2Val.insert(make_pair("eEventType_GetResource", eEventType_GetResource));
		mapStr2Val.insert(make_pair("eEventType_SpendResource", eEventType_SpendResource));
		mapStr2Val.insert(make_pair("eEventType_PackExpand", eEventType_PackExpand));
		mapStr2Val.insert(make_pair("eEventType_PackItemSold", eEventType_PackItemSold));
		mapStr2Val.insert(make_pair("eEventType_PackArrange", eEventType_PackArrange));
		mapStr2Val.insert(make_pair("eEventType_AchievementLevelUp", eEventType_AchievementLevelUp));
		mapStr2Val.insert(make_pair("eEventType_AchievementGet", eEventType_AchievementGet));
		mapStr2Val.insert(make_pair("eEventType_PlayerLevelChanging", eEventType_PlayerLevelChanging));
		mapStr2Val.insert(make_pair("eEventType_DungeonEnter", eEventType_DungeonEnter));
		mapStr2Val.insert(make_pair("eEventType_DungeonFinish", eEventType_DungeonFinish));
		mapStr2Val.insert(make_pair("eEventType_DungeonLeave", eEventType_DungeonLeave));
		mapStr2Val.insert(make_pair("eEventType_DungeonAutoFight", eEventType_DungeonAutoFight));
		mapStr2Val.insert(make_pair("eEventType_DungeonStarGet", eEventType_DungeonStarGet));
		mapStr2Val.insert(make_pair("eEventType_DungeonBattleWin", eEventType_DungeonBattleWin));
		mapStr2Val.insert(make_pair("eEventType_DungeonFinishAndAuto", eEventType_DungeonFinishAndAuto));
		mapStr2Val.insert(make_pair("eEventType_DungeonStar", eEventType_DungeonStar));
		mapStr2Val.insert(make_pair("eEventType_DungeonFinishType", eEventType_DungeonFinishType));
		mapStr2Val.insert(make_pair("eEventType_DungeonVsMonster", eEventType_DungeonVsMonster));
		mapStr2Val.insert(make_pair("eEventType_DungeonFightMonster", eEventType_DungeonFightMonster));
		mapStr2Val.insert(make_pair("eEventType_DivisionFinish", eEventType_DivisionFinish));
		mapStr2Val.insert(make_pair("eEventType_DivisionRefresh", eEventType_DivisionRefresh));
		mapStr2Val.insert(make_pair("eEventType_DivisionRefreshGet", eEventType_DivisionRefreshGet));
		mapStr2Val.insert(make_pair("eEventType_DivisionBuying", eEventType_DivisionBuying));
		mapStr2Val.insert(make_pair("eEventType_DivisionLevelUp", eEventType_DivisionLevelUp));
		mapStr2Val.insert(make_pair("eEventType_DivisionPrizeGet", eEventType_DivisionPrizeGet));
		mapStr2Val.insert(make_pair("eEventType_GovernmentTaskFinish", eEventType_GovernmentTaskFinish));
		mapStr2Val.insert(make_pair("eEventType_GovernmentTaskRefresh", eEventType_GovernmentTaskRefresh));
		mapStr2Val.insert(make_pair("eEventType_GovernmentTaskRefreshGet", eEventType_GovernmentTaskRefreshGet));
		mapStr2Val.insert(make_pair("eEventType_GovernmentTaskBuying", eEventType_GovernmentTaskBuying));
		mapStr2Val.insert(make_pair("eEventType_GovernmentTaskLevelUp", eEventType_GovernmentTaskLevelUp));
		mapStr2Val.insert(make_pair("eEventType_GovernmentTaskPrizeGet", eEventType_GovernmentTaskPrizeGet));
		mapStr2Val.insert(make_pair("eEventType_GuildCreation", eEventType_GuildCreation));
		mapStr2Val.insert(make_pair("eEventType_GuildJoining", eEventType_GuildJoining));
		mapStr2Val.insert(make_pair("eEventType_GuildDismiss", eEventType_GuildDismiss));
		mapStr2Val.insert(make_pair("eEventType_GuildQuit", eEventType_GuildQuit));
		mapStr2Val.insert(make_pair("eEventType_GuildSetQQ", eEventType_GuildSetQQ));
		mapStr2Val.insert(make_pair("eEventType_GuildAccuse", eEventType_GuildAccuse));
		mapStr2Val.insert(make_pair("eEventType_GuildLevel", eEventType_GuildLevel));
		mapStr2Val.insert(make_pair("eEventType_GuildDonate", eEventType_GuildDonate));
		mapStr2Val.insert(make_pair("eEventType_GuildBuildingUpgrade", eEventType_GuildBuildingUpgrade));
		mapStr2Val.insert(make_pair("eEventType_GuildOblation", eEventType_GuildOblation));
		mapStr2Val.insert(make_pair("eEventType_GuildOblationSelf", eEventType_GuildOblationSelf));
		mapStr2Val.insert(make_pair("eEventType_GuildShopBought", eEventType_GuildShopBought));
		mapStr2Val.insert(make_pair("eEventType_GuildSkillUpgrade", eEventType_GuildSkillUpgrade));
		mapStr2Val.insert(make_pair("eEventType_RankFightingPowerChanging", eEventType_RankFightingPowerChanging));
		mapStr2Val.insert(make_pair("eEventType_RankPetChanging", eEventType_RankPetChanging));
		mapStr2Val.insert(make_pair("eEventType_RankFighterChanging", eEventType_RankFighterChanging));
		mapStr2Val.insert(make_pair("eEventType_RankTrumpChanging", eEventType_RankTrumpChanging));
		mapStr2Val.insert(make_pair("eEventType_PlayerProstrate", eEventType_PlayerProstrate));
		mapStr2Val.insert(make_pair("eEventType_ReceiveProstrate", eEventType_ReceiveProstrate));
		mapStr2Val.insert(make_pair("eEventType_ExperienceChallenge", eEventType_ExperienceChallenge));
		mapStr2Val.insert(make_pair("eEventType_ExperienceSectionChanging", eEventType_ExperienceSectionChanging));
		mapStr2Val.insert(make_pair("eEventType_ExperienceRefresh", eEventType_ExperienceRefresh));
		mapStr2Val.insert(make_pair("eEventType_ExperienceTimesBought", eEventType_ExperienceTimesBought));
		mapStr2Val.insert(make_pair("eEventType_ExperienceGetVictory", eEventType_ExperienceGetVictory));
		mapStr2Val.insert(make_pair("eEventType_ExperienceGetPrize", eEventType_ExperienceGetPrize));
		mapStr2Val.insert(make_pair("eEventType_ExperienceLevelChange", eEventType_ExperienceLevelChange));
		mapStr2Val.insert(make_pair("eEventType_ArenaRankChanging", eEventType_ArenaRankChanging));
		mapStr2Val.insert(make_pair("eEventType_ArenaChallenge", eEventType_ArenaChallenge));
		mapStr2Val.insert(make_pair("eEventType_ArenaGetVictory", eEventType_ArenaGetVictory));
		mapStr2Val.insert(make_pair("eEventType_ArenaCancelRankBridge", eEventType_ArenaCancelRankBridge));
		mapStr2Val.insert(make_pair("eEventType_ArenaGetPrize", eEventType_ArenaGetPrize));
		mapStr2Val.insert(make_pair("eEventType_ArenaRankDwon", eEventType_ArenaRankDwon));
		mapStr2Val.insert(make_pair("eEventType_ArenaRank", eEventType_ArenaRank));
		mapStr2Val.insert(make_pair("eEventType_ArenaBestRank", eEventType_ArenaBestRank));
		mapStr2Val.insert(make_pair("eEventType_TeamBattleVictory", eEventType_TeamBattleVictory));
		mapStr2Val.insert(make_pair("eEventType_DemonTowerBattle", eEventType_DemonTowerBattle));
		mapStr2Val.insert(make_pair("eEventType_DemonTowerHighestChanging", eEventType_DemonTowerHighestChanging));
		mapStr2Val.insert(make_pair("eEventType_DemonTowerDefendSuccess", eEventType_DemonTowerDefendSuccess));
		mapStr2Val.insert(make_pair("eEventType_DemonTowerRobSuccess", eEventType_DemonTowerRobSuccess));
		mapStr2Val.insert(make_pair("eEventType_DemonTowerGetPrize", eEventType_DemonTowerGetPrize));
		mapStr2Val.insert(make_pair("eEventType_DemonTowerRob", eEventType_DemonTowerRob));
		mapStr2Val.insert(make_pair("eEventType_DemonTowerClearPVECD", eEventType_DemonTowerClearPVECD));
		mapStr2Val.insert(make_pair("eEventType_DemonTowerClearPVPCD", eEventType_DemonTowerClearPVPCD));
		mapStr2Val.insert(make_pair("eEventType_HolyLandJoin", eEventType_HolyLandJoin));
		mapStr2Val.insert(make_pair("eEventType_HolyLandQuit", eEventType_HolyLandQuit));
		mapStr2Val.insert(make_pair("eEventType_HolyLandUseItem", eEventType_HolyLandUseItem));
		mapStr2Val.insert(make_pair("eEventType_WorldBossEnter", eEventType_WorldBossEnter));
		mapStr2Val.insert(make_pair("eEventType_WorldBossKill", eEventType_WorldBossKill));
		mapStr2Val.insert(make_pair("eEventType_WorldBossInspire", eEventType_WorldBossInspire));
		mapStr2Val.insert(make_pair("eEventType_WorldBossAttack", eEventType_WorldBossAttack));
		mapStr2Val.insert(make_pair("eEventType_WorldBossAttackRightNow", eEventType_WorldBossAttackRightNow));
		mapStr2Val.insert(make_pair("eEventType_WorldBossBuyLive", eEventType_WorldBossBuyLive));
		mapStr2Val.insert(make_pair("eEventType_ShushanBattleJoin", eEventType_ShushanBattleJoin));
		mapStr2Val.insert(make_pair("eEventType_ShushanBattleQuit", eEventType_ShushanBattleQuit));
		mapStr2Val.insert(make_pair("eEventType_ShushanBattleVictory", eEventType_ShushanBattleVictory));
		mapStr2Val.insert(make_pair("eEventType_ShushanBattleSkillUsing", eEventType_ShushanBattleSkillUsing));
		mapStr2Val.insert(make_pair("eEventType_ShushanBattleTaskFinish", eEventType_ShushanBattleTaskFinish));
		mapStr2Val.insert(make_pair("eEventType_ShushanBattleWinStreak", eEventType_ShushanBattleWinStreak));
		mapStr2Val.insert(make_pair("eEventType_ShushanBattleBadgeUpgrade", eEventType_ShushanBattleBadgeUpgrade));
		mapStr2Val.insert(make_pair("eEventType_ShushanBattleGetPrize", eEventType_ShushanBattleGetPrize));
		mapStr2Val.insert(make_pair("eEventType_GuildBattleSignUp", eEventType_GuildBattleSignUp));
		mapStr2Val.insert(make_pair("eEventType_GuildBattleOneRoundEnd", eEventType_GuildBattleOneRoundEnd));
		mapStr2Val.insert(make_pair("eEventType_GuildBattleEnd", eEventType_GuildBattleEnd));
		mapStr2Val.insert(make_pair("eEventType_GuildBattleInspire", eEventType_GuildBattleInspire));
		mapStr2Val.insert(make_pair("eEventType_GuildBattleWeekendEnd", eEventType_GuildBattleWeekendEnd));
		mapStr2Val.insert(make_pair("eEventType_GuildBattleWin", eEventType_GuildBattleWin));
		mapStr2Val.insert(make_pair("eEventType_GuildBattleComboKill", eEventType_GuildBattleComboKill));
		mapStr2Val.insert(make_pair("eEventType_GuildBattleJoin", eEventType_GuildBattleJoin));
		mapStr2Val.insert(make_pair("eEventType_FightingPowerChanging", eEventType_FightingPowerChanging));
		mapStr2Val.insert(make_pair("eEventType_FightingPowerChangingPlayer", eEventType_FightingPowerChangingPlayer));
		mapStr2Val.insert(make_pair("eEventType_FightingPowerChangingAnyFigher", eEventType_FightingPowerChangingAnyFigher));
		mapStr2Val.insert(make_pair("eEventType_FriendAdding", eEventType_FriendAdding));
		mapStr2Val.insert(make_pair("eEventType_FriendRecommendUsing", eEventType_FriendRecommendUsing));
		mapStr2Val.insert(make_pair("eEventType_FriendSignatureChangings", eEventType_FriendSignatureChangings));
		mapStr2Val.insert(make_pair("eEventType_VipLevelChanging", eEventType_VipLevelChanging));
		mapStr2Val.insert(make_pair("eEventType_VipRechargeSuccess", eEventType_VipRechargeSuccess));
		mapStr2Val.insert(make_pair("eEventType_VipConsumptionSuccess", eEventType_VipConsumptionSuccess));
		mapStr2Val.insert(make_pair("eEventType_VipGetPrize", eEventType_VipGetPrize));
		mapStr2Val.insert(make_pair("eEventType_VipGetPrizeMore", eEventType_VipGetPrizeMore));
		mapStr2Val.insert(make_pair("eEventType_ActiveValueGetPrize", eEventType_ActiveValueGetPrize));
		mapStr2Val.insert(make_pair("eEventType_ActivePointGet", eEventType_ActivePointGet));
		mapStr2Val.insert(make_pair("eEventType_FightingPowerComparing", eEventType_FightingPowerComparing));
		mapStr2Val.insert(make_pair("eEventType_MallBought", eEventType_MallBought));
		mapStr2Val.insert(make_pair("eEventType_MallBoughtMomey", eEventType_MallBoughtMomey));
		mapStr2Val.insert(make_pair("eEventType_ExChangingMallBought", eEventType_ExChangingMallBought));
		mapStr2Val.insert(make_pair("eEventType_SettingsChanging", eEventType_SettingsChanging));
		mapStr2Val.insert(make_pair("eEventType_SettingsFastShield", eEventType_SettingsFastShield));
		mapStr2Val.insert(make_pair("eEventType_SettingsFullScreen", eEventType_SettingsFullScreen));
		mapStr2Val.insert(make_pair("eEventType_WorldMapMoving", eEventType_WorldMapMoving));
		mapStr2Val.insert(make_pair("eEventType_MailReading", eEventType_MailReading));
		mapStr2Val.insert(make_pair("eEventType_MailReceiving", eEventType_MailReceiving));
		mapStr2Val.insert(make_pair("eEventType_SkillLearning", eEventType_SkillLearning));
		mapStr2Val.insert(make_pair("eEventType_SkillEquiping", eEventType_SkillEquiping));
		mapStr2Val.insert(make_pair("eEventType_SkillUpgrade", eEventType_SkillUpgrade));
		mapStr2Val.insert(make_pair("eEventType_EquipmentStrengthening", eEventType_EquipmentStrengthening));
		mapStr2Val.insert(make_pair("eEventType_EquipmentForging", eEventType_EquipmentForging));
		mapStr2Val.insert(make_pair("eEventType_TrumpActive", eEventType_TrumpActive));
		mapStr2Val.insert(make_pair("eEventType_TrumpEquiping", eEventType_TrumpEquiping));
		mapStr2Val.insert(make_pair("eEventType_TrumpForging", eEventType_TrumpForging));
		mapStr2Val.insert(make_pair("eEventType_FighterEnlisted", eEventType_FighterEnlisted));
		mapStr2Val.insert(make_pair("eEventType_FighterLevelUp", eEventType_FighterLevelUp));
		mapStr2Val.insert(make_pair("eEventType_FighterCuiTi", eEventType_FighterCuiTi));
		mapStr2Val.insert(make_pair("eEventType_FighterSkillUpgrade", eEventType_FighterSkillUpgrade));
		mapStr2Val.insert(make_pair("eEventType_FighterSkillExchange", eEventType_FighterSkillExchange));
		mapStr2Val.insert(make_pair("eEventType_FighterLearningRecipe", eEventType_FighterLearningRecipe));
		mapStr2Val.insert(make_pair("eEventType_FighterRecipeUpgrade", eEventType_FighterRecipeUpgrade));
		mapStr2Val.insert(make_pair("eEventType_FormationActive", eEventType_FormationActive));
		mapStr2Val.insert(make_pair("eEventType_FormationChange", eEventType_FormationChange));
		mapStr2Val.insert(make_pair("eEventType_PetActive", eEventType_PetActive));
		mapStr2Val.insert(make_pair("eEventType_PetGetFighting", eEventType_PetGetFighting));
		mapStr2Val.insert(make_pair("eEventType_FighterBatterPoint", eEventType_FighterBatterPoint));
		mapStr2Val.insert(make_pair("eEventType_FighterCollected", eEventType_FighterCollected));
		mapStr2Val.insert(make_pair("eEventType_FighterStarCollected", eEventType_FighterStarCollected));
		mapStr2Val.insert(make_pair("eEventType_FighterInBattle", eEventType_FighterInBattle));
		mapStr2Val.insert(make_pair("eEventType_FormationChangeMore", eEventType_FormationChangeMore));
		mapStr2Val.insert(make_pair("eEventType_FighterCombinationUnlock", eEventType_FighterCombinationUnlock));
		mapStr2Val.insert(make_pair("eEventType_PetUpgrade", eEventType_PetUpgrade));
		mapStr2Val.insert(make_pair("eEventType_BeastSoulActive", eEventType_BeastSoulActive));
		mapStr2Val.insert(make_pair("eEventType_BeastUpgrade", eEventType_BeastUpgrade));
		mapStr2Val.insert(make_pair("eEventType_BeastSoulGet", eEventType_BeastSoulGet));
		mapStr2Val.insert(make_pair("eEventType_HorseActive", eEventType_HorseActive));
		mapStr2Val.insert(make_pair("eEventType_HorseGetUsed", eEventType_HorseGetUsed));
		mapStr2Val.insert(make_pair("eEventType_HorseUpgrade", eEventType_HorseUpgrade));
		mapStr2Val.insert(make_pair("eEventType_PlayerLearningRecipe", eEventType_PlayerLearningRecipe));
		mapStr2Val.insert(make_pair("eEventType_PlayerEquipingRecipe", eEventType_PlayerEquipingRecipe));
		mapStr2Val.insert(make_pair("eEventType_PlayerRecipeUpgrade", eEventType_PlayerRecipeUpgrade));
		mapStr2Val.insert(make_pair("eEventType_PlayerDujieSuccess", eEventType_PlayerDujieSuccess));
		mapStr2Val.insert(make_pair("eEventType_OnlineTime", eEventType_OnlineTime));
		mapStr2Val.insert(make_pair("eEventType_FaionActive", eEventType_FaionActive));
		mapStr2Val.insert(make_pair("eEventType_FaionGetUsed", eEventType_FaionGetUsed));
		mapStr2Val.insert(make_pair("eEventType_FaionUpgrade", eEventType_FaionUpgrade));
		mapStr2Val.insert(make_pair("eEventType_StoveFireLearning", eEventType_StoveFireLearning));
		mapStr2Val.insert(make_pair("eEventType_StoveFireFinish", eEventType_StoveFireFinish));
		mapStr2Val.insert(make_pair("eEventType_StoveUpgrade", eEventType_StoveUpgrade));
		mapStr2Val.insert(make_pair("eEventType_StovePlayerHelp", eEventType_StovePlayerHelp));
		mapStr2Val.insert(make_pair("eEventType_StoveFighterHelp", eEventType_StoveFighterHelp));
		mapStr2Val.insert(make_pair("eEventType_StoveBellow", eEventType_StoveBellow));
		mapStr2Val.insert(make_pair("eEventType_StoveComingIn", eEventType_StoveComingIn));
		mapStr2Val.insert(make_pair("eEventType_StoveFireStarting", eEventType_StoveFireStarting));
		mapStr2Val.insert(make_pair("eEventType_NewPlayerTask", eEventType_NewPlayerTask));
		mapStr2Val.insert(make_pair("eEventType_NewPlayerClient", eEventType_NewPlayerClient));
		mapStr2Val.insert(make_pair("eEventType_CircleTaskFinish", eEventType_CircleTaskFinish));
		mapStr2Val.insert(make_pair("eEventType_CircleTaskStarUp", eEventType_CircleTaskStarUp));
		mapStr2Val.insert(make_pair("eEventType_TravelFinish", eEventType_TravelFinish));
		mapStr2Val.insert(make_pair("eEventType_GuardEmeiFinish", eEventType_GuardEmeiFinish));
		mapStr2Val.insert(make_pair("eEventType_GuardEmeiFinishMore", eEventType_GuardEmeiFinishMore));
		mapStr2Val.insert(make_pair("eEventType_QQAlarmClock", eEventType_QQAlarmClock));
		mapStr2Val.insert(make_pair("eEventType_BeautyUnlock", eEventType_BeautyUnlock));
		mapStr2Val.insert(make_pair("eEventType_BeautyUnlockNum", eEventType_BeautyUnlockNum));
		mapStr2Val.insert(make_pair("eEventType_BeautyHug", eEventType_BeautyHug));
		mapStr2Val.insert(make_pair("eEventType_BeautySend", eEventType_BeautySend));
		mapStr2Val.insert(make_pair("eEventType_BeautySendAppreciate", eEventType_BeautySendAppreciate));
		mapStr2Val.insert(make_pair("eEventType_BeautyLevelUp", eEventType_BeautyLevelUp));
		mapStr2Val.insert(make_pair("eEventType_BattleArraySuccess", eEventType_BattleArraySuccess));
		mapStr2Val.insert(make_pair("eEventType_BattleArraySuccessInfo", eEventType_BattleArraySuccessInfo));
		mapStr2Val.insert(make_pair("eEventType_TreasureUseBuff", eEventType_TreasureUseBuff));
		mapStr2Val.insert(make_pair("eEventType_TreasureSuccess", eEventType_TreasureSuccess));
		mapStr2Val.insert(make_pair("eEventType_XinfaLearn", eEventType_XinfaLearn));
		mapStr2Val.insert(make_pair("eEventType_XinfaLevelUp", eEventType_XinfaLevelUp));
		mapStr2Val.insert(make_pair("eEventType_BoatFinish", eEventType_BoatFinish));
		mapStr2Val.insert(make_pair("eEventType_BoatRefresh", eEventType_BoatRefresh));
		mapStr2Val.insert(make_pair("eEventType_BoatRob", eEventType_BoatRob));
		mapStr2Val.insert(make_pair("eEventType_BoatProtect", eEventType_BoatProtect));
		mapStr2Val.insert(make_pair("eEventType_BoatBegin", eEventType_BoatBegin));
		mapStr2Val.insert(make_pair("eEventType_BoatGet", eEventType_BoatGet));
		mapStr2Val.insert(make_pair("eEventType_MoneyTree", eEventType_MoneyTree));
		mapStr2Val.insert(make_pair("eEventType_LingMountainSeize", eEventType_LingMountainSeize));
		mapStr2Val.insert(make_pair("eEventType_LingMountainJoin", eEventType_LingMountainJoin));
		mapStr2Val.insert(make_pair("eEventType_LingMountainConquer", eEventType_LingMountainConquer));
		mapStr2Val.insert(make_pair("eEventType_LingMountainWin", eEventType_LingMountainWin));
		mapStr2Val.insert(make_pair("eEventType_GemsGet", eEventType_GemsGet));
		mapStr2Val.insert(make_pair("eEventType_GemsSuit", eEventType_GemsSuit));
		mapStr2Val.insert(make_pair("eEventType_GemsCompose", eEventType_GemsCompose));
		mapStr2Val.insert(make_pair("eEventType_MysteryTreasureJoin", eEventType_MysteryTreasureJoin));
		mapStr2Val.insert(make_pair("eEventType_MysteryTreasureBox", eEventType_MysteryTreasureBox));
		mapStr2Val.insert(make_pair("eEventType_MysteryTreasureWin", eEventType_MysteryTreasureWin));
		mapStr2Val.insert(make_pair("eEventType_MysteryTreasureMove", eEventType_MysteryTreasureMove));
		mapStr2Val.insert(make_pair("eEventType_MysteryTreasureAliveTime", eEventType_MysteryTreasureAliveTime));
		mapStr2Val.insert(make_pair("eEventType_MysteryTreasureReport", eEventType_MysteryTreasureReport));
		mapStr2Val.insert(make_pair("eEventType_QuestionJoin", eEventType_QuestionJoin));
		mapStr2Val.insert(make_pair("eEventType_QuestionUseSkill", eEventType_QuestionUseSkill));
		mapStr2Val.insert(make_pair("eEventType_QuestionScore", eEventType_QuestionScore));
		mapStr2Val.insert(make_pair("eEventType_SkyTreasureJoin", eEventType_SkyTreasureJoin));
		mapStr2Val.insert(make_pair("eEventType_SkyTreasureGet", eEventType_SkyTreasureGet));
		mapStr2Val.insert(make_pair("eEventType_PlayerDraw", eEventType_PlayerDraw));
		mapStr2Val.insert(make_pair("eEventType_GetEnergy", eEventType_GetEnergy));
		mapStr2Val.insert(make_pair("eEventType_CheckIn", eEventType_CheckIn));
		mapStr2Val.insert(make_pair("eEventType_CheckInAdd", eEventType_CheckInAdd));
		mapStr2Val.insert(make_pair("eEventType_CheckInGetPrize", eEventType_CheckInGetPrize));
		mapStr2Val.insert(make_pair("eEventType_MonthCard", eEventType_MonthCard));
		mapStr2Val.insert(make_pair("eEventType_MonthCardSend", eEventType_MonthCardSend));
		mapStr2Val.insert(make_pair("eEventType_14DaysGift", eEventType_14DaysGift));
		mapStr2Val.insert(make_pair("eEventType_YellowDiamondNum", eEventType_YellowDiamondNum));
		mapStr2Val.insert(make_pair("eEventType_YellowDiamondGift", eEventType_YellowDiamondGift));
		mapStr2Val.insert(make_pair("eEventType_SitDownTime", eEventType_SitDownTime));
		mapStr2Val.insert(make_pair("eEventType_UsePromote", eEventType_UsePromote));
		mapStr2Val.insert(make_pair("eEventType_QQAlarmGift", eEventType_QQAlarmGift));
		mapStr2Val.insert(make_pair("eEventType_WeiBoGift", eEventType_WeiBoGift));
		mapStr2Val.insert(make_pair("eEventType_WeChatGift", eEventType_WeChatGift));
		mapStr2Val.insert(make_pair("eEventType_FriendInviteGift", eEventType_FriendInviteGift));
		mapStr2Val.insert(make_pair("eEventType_XiHeTruck", eEventType_XiHeTruck));
		mapStr2Val.insert(make_pair("eEventType_TrumpGet", eEventType_TrumpGet));
		mapStr2Val.insert(make_pair("eEventType_TrumpEquip", eEventType_TrumpEquip));
		mapStr2Val.insert(make_pair("eEventType_TrumpToStrongSucess", eEventType_TrumpToStrongSucess));
		mapStr2Val.insert(make_pair("eEventType_TrumpToStrongFaild", eEventType_TrumpToStrongFaild));
		mapStr2Val.insert(make_pair("eEventType_TrumpPu", eEventType_TrumpPu));
		mapStr2Val.insert(make_pair("eEventType_TrumpDes", eEventType_TrumpDes));
		mapStr2Val.insert(make_pair("eEventType_ItemUpgrade", eEventType_ItemUpgrade));
		mapStr2Val.insert(make_pair("eEventType_ShenglingPlay", eEventType_ShenglingPlay));
		mapStr2Val.insert(make_pair("eEventType_ShenglingControl", eEventType_ShenglingControl));
		mapStr2Val.insert(make_pair("eEventType_ShenglingReturn", eEventType_ShenglingReturn));
		mapStr2Val.insert(make_pair("eEventType_ShenglingThreeGameOver", eEventType_ShenglingThreeGameOver));
		mapStr2Val.insert(make_pair("eEventType_ShenglingPuzzOver", eEventType_ShenglingPuzzOver));
		mapStr2Val.insert(make_pair("eEventType_Max", eEventType_Max));
	}
	auto it = mapStr2Val.find(pszEnumStr);
	if(it == mapStr2Val.end())
	{
		LOG_CRI << "Unrecognized enum string: " << pszEnumStr;
		return false;
	}
	e = it->second;
	return true;
}

#endif //PROT_USE_XML

const char* GetDescription(EventType e)
{
	switch(e)
	{
	case eEventType_PlayerLogin:
		return "登录【玩家登录游戏时】参数：1";
	case eEventType_GetResource:
		return "货币【玩家得到货币】参数：货币类型,得到数量，当前剩余值";
	case eEventType_SpendResource:
		return "货币【玩家消耗货币】参数：货币类型，消耗数量，当前剩余值";
	case eEventType_PackExpand:
		return "背包【成功扩展背包后】参数：累计扩展背包格数";
	case eEventType_PackItemSold:
		return "背包【出售物品成功后】参数：出售物品数量";
	case eEventType_PackArrange:
		return "背包【整理背包后】参数：整理背包次数";
	case eEventType_AchievementLevelUp:
		return "成就【成就等级升级后】参数：成就等级";
	case eEventType_AchievementGet:
		return "成就【成就达成时】参数：成就Id";
	case eEventType_PlayerLevelChanging:
		return "主角【主角等级发生变化】参数：主角等级";
	case eEventType_DungeonEnter:
		return "副本【进入副本】参数：副本id";
	case eEventType_DungeonFinish:
		return "副本【通关副本】参数：副本id，副本星级，战斗力，出战散仙id（副本id;副本星级;战斗力;出战散仙id,出战散仙id...）";
	case eEventType_DungeonLeave:
		return "副本【离开副本】参数：副本id，副本星级分别状态，装备阵灵id，出战散仙id，装备法宝id，战斗力";
	case eEventType_DungeonAutoFight:
		return "副本【副本扫荡】参数：副本id";
	case eEventType_DungeonStarGet:
		return "副本【通关获得星级时】参数：获得星级数";
	case eEventType_DungeonBattleWin:
		return "副本【副本中战斗胜利】参数：1";
	case eEventType_DungeonFinishAndAuto:
		return "副本【通关或扫荡副本后】参数：1";
	case eEventType_DungeonStar:
		return "副本【单人副本完成】参数：副本id,评价星级";
	case eEventType_DungeonFinishType:
		return "副本【副本通关或扫荡后】参数：副本类型,通关次数";
	case eEventType_DungeonVsMonster:
		return "副本【打怪物】参数：GroupID,胜负,string 玩家参数";
	case eEventType_DungeonFightMonster:
		return "副本【副本打怪物】参数：副本id,怪物id,玩家战斗力,胜负";
	case eEventType_DivisionFinish:
		return "师门【完成师门任务】参数：今日完成次数，师门任务品质";
	case eEventType_DivisionRefresh:
		return "师门【刷新师门任务】参数：免费刷新师门任务次数";
	case eEventType_DivisionRefreshGet:
		return "师门【刷新得到师门任务】参数：刷到的任务品质";
	case eEventType_DivisionBuying:
		return "师门【购买师门任务】参数：购买师门任务次数";
	case eEventType_DivisionLevelUp:
		return "师门【师门等级升级】参数：师门等级";
	case eEventType_DivisionPrizeGet:
		return "师门【领取清修奖励后】参数：1";
	case eEventType_GovernmentTaskFinish:
		return "衙门【完成衙门任务】参数：完成次数，品质";
	case eEventType_GovernmentTaskRefresh:
		return "衙门【刷新衙门任务】参数：刷新衙门任务次数";
	case eEventType_GovernmentTaskRefreshGet:
		return "衙门【刷新得到衙门任务】参数：刷到的任务品质";
	case eEventType_GovernmentTaskBuying:
		return "衙门【购买衙门任务】参数：购买衙门任务次数";
	case eEventType_GovernmentTaskLevelUp:
		return "衙门【衙门等级升级】参数：衙门等级";
	case eEventType_GovernmentTaskPrizeGet:
		return "衙门【领取侠义奖励】参数：1";
	case eEventType_GuildCreation:
		return "帮派【成功创建帮派】参数：帮派id";
	case eEventType_GuildJoining:
		return "帮派【成功加入帮派（含创建）】参数：帮派id，帮派等级";
	case eEventType_GuildDismiss:
		return "帮派【成功解散帮派】参数：帮派id";
	case eEventType_GuildQuit:
		return "帮派【成功退出帮派】参数：帮派id";
	case eEventType_GuildSetQQ:
		return "帮派【成功设置Q群】参数：帮派id，帮派Q群号码";
	case eEventType_GuildAccuse:
		return "帮派【成功弹劾】参数：帮派id";
	case eEventType_GuildLevel:
		return "帮派【帮派升级至x级】参数：帮派等级  string 帮派id，";
	case eEventType_GuildDonate:
		return "帮派【帮派捐献】参数：帮派当前资金，捐献银币数，获得贡献数，捐献银币数 string 帮派id";
	case eEventType_GuildBuildingUpgrade:
		return "帮派【帮派建筑升级】参数：帮派id，建筑id，建筑等级";
	case eEventType_GuildOblation:
		return "帮派【帮派供奉】参数：帮派id，供奉类型，当前供奉人数";
	case eEventType_GuildOblationSelf:
		return "帮派【自身帮派供奉】参数：供奉类型，累计次数";
	case eEventType_GuildShopBought:
		return "帮派【在帮派商店购买】参数：购买物品id，消耗帮贡";
	case eEventType_GuildSkillUpgrade:
		return "帮派【帮派技能升级】参数：帮派技能id，０（占位），所有帮派技能等级";
	case eEventType_RankFightingPowerChanging:
		return "排行榜【队伍战力排名发生改变、登录时】参数：战力排行值";
	case eEventType_RankPetChanging:
		return "排行榜【阵灵排名发生改变、登录时】参数：阵灵排行值";
	case eEventType_RankFighterChanging:
		return "排行榜【散仙战力排名发生改变、登录时】参数：散仙战力排行值";
	case eEventType_RankTrumpChanging:
		return "排行榜【法宝战力排名发生变化、登录时】参数：法宝战力排行值";
	case eEventType_PlayerProstrate:
		return "排行榜【进行崇拜】参数：今日崇拜次数";
	case eEventType_ReceiveProstrate:
		return "排行榜【受到崇拜、登录时】参数：今日受崇拜次数";
	case eEventType_ExperienceChallenge:
		return "历练【历练发起挑战】参数：今日历练挑战次数";
	case eEventType_ExperienceSectionChanging:
		return "历练【历练段位发生改变、登录时】参数：段位id";
	case eEventType_ExperienceRefresh:
		return "历练【历练刷新】参数：历练刷新次数";
	case eEventType_ExperienceTimesBought:
		return "历练【历练购买次数】参数：购买历练次数";
	case eEventType_ExperienceGetVictory:
		return "历练【历练获得胜利】参数：1";
	case eEventType_ExperienceGetPrize:
		return "历练【玩家领取历练奖励】参数：奖励类型";
	case eEventType_ExperienceLevelChange:
		return "历练等级发生变化【历练结算】参数： 初始段位，现在段位";
	case eEventType_ArenaRankChanging:
		return "斗剑【斗剑排名发生变化、登录时】参数：斗剑最高排名";
	case eEventType_ArenaChallenge:
		return "斗剑【斗剑发起挑战】参数：今日斗剑次数";
	case eEventType_ArenaGetVictory:
		return "斗剑【斗剑胜利】参数：1";
	case eEventType_ArenaCancelRankBridge:
		return "斗剑【玩家点击取消跨度】参数：1";
	case eEventType_ArenaGetPrize:
		return "斗剑【玩家领取斗剑奖励】参数：奖励类型";
	case eEventType_ArenaRankDwon:
		return "斗剑【玩家斗剑名次下降】参数：当前名次";
	case eEventType_ArenaRank:
		return "斗剑【玩家斗剑】参数：今日斗剑次数,当前排名";
	case eEventType_ArenaBestRank:
		return "斗剑【历史最高排名发生变化】参数：今日斗剑次数,当前排名";
	case eEventType_TeamBattleVictory:
		return "组队副本【玩家通关组队副本】参数：组队副本id，通关类型（普通，协助），今日对应通关次数";
	case eEventType_DemonTowerBattle:
		return "锁妖塔【进行锁妖塔战斗】参数：1";
	case eEventType_DemonTowerHighestChanging:
		return "锁妖塔【玩家锁妖塔最高层数发生变化】参数：锁妖塔最高层数";
	case eEventType_DemonTowerDefendSuccess:
		return "锁妖塔【玩家成功镇守锁妖塔】参数：镇守时间，魂魄id，获得数";
	case eEventType_DemonTowerRobSuccess:
		return "锁妖塔【玩家成功抢夺锁妖塔】参数：获得奖励id，获得数";
	case eEventType_DemonTowerGetPrize:
		return "锁妖塔【领取锁妖塔奖励、登录时】参数：1";
	case eEventType_DemonTowerRob:
		return "锁妖塔【玩家进行抢夺】参数：1";
	case eEventType_DemonTowerClearPVECD:
		return "锁妖塔【玩家清除打怪CD】参数：1";
	case eEventType_DemonTowerClearPVPCD:
		return "锁妖塔【玩家清除抢人CD】参数：1";
	case eEventType_HolyLandJoin:
		return "琅嬛福地【参加琅环福地】参数：1";
	case eEventType_HolyLandQuit:
		return "琅嬛福地【结束琅环福地】参数：参加时间";
	case eEventType_HolyLandUseItem:
		return "琅嬛福地【完成琅环福地物件交互】参数：交互技能id";
	case eEventType_WorldBossEnter:
		return "世界BOSS【进入世界Boss活动】参数：Bossid";
	case eEventType_WorldBossKill:
		return "世界BOSS【击杀世界Boss】参数：Bossid";
	case eEventType_WorldBossInspire:
		return "世界BOSS【在世界Boss进行鼓舞】参数：鼓舞类型，当前鼓舞次数";
	case eEventType_WorldBossAttack:
		return "世界BOSS【攻击世界Boss】参数";
	case eEventType_WorldBossAttackRightNow:
		return "世界BOSS立即战斗【世界Boss立即战斗】参数1";
	case eEventType_WorldBossBuyLive:
		return "世界BOSS买活【世界Boss买活】参数1";
	case eEventType_ShushanBattleJoin:
		return "蜀山论剑【参加蜀山论剑】参数：1";
	case eEventType_ShushanBattleQuit:
		return "蜀山论剑【离开蜀山论剑】参数：参加时间(暂时不做)";
	case eEventType_ShushanBattleVictory:
		return "蜀山论剑【蜀山论剑获胜】参数：获胜次数，使用霸气、怒气技能id（多个）";
	case eEventType_ShushanBattleSkillUsing:
		return "蜀山论剑【蜀山论剑使用技能】参数：技能id";
	case eEventType_ShushanBattleTaskFinish:
		return "蜀山论剑【蜀山论剑完成任务】参数：今日完成次数，任务id";
	case eEventType_ShushanBattleWinStreak:
		return "蜀山论剑【蜀山论剑胜利时】参数：当前连杀次数";
	case eEventType_ShushanBattleBadgeUpgrade:
		return "蜀山论剑【蜀山论剑徽章等级提升】参数：当前徽章等级";
	case eEventType_ShushanBattleGetPrize:
		return "蜀山论剑【蜀山论剑发奖励时】参数：奖励类型(1普通，2连杀，3荣誉王)";
	case eEventType_GuildBattleSignUp:
		return "帮派战【帮派战报名】参数：帮派id（所有帮派id都是string类型不在参数列表）";
	case eEventType_GuildBattleOneRoundEnd:
		return "帮派战【帮派战一轮结束】参数：帮派id，积分，对战帮派id，对战帮派积分，我的获胜场次";
	case eEventType_GuildBattleEnd:
		return "帮派战【帮派战结束】参数：帮派id，参与时间";
	case eEventType_GuildBattleInspire:
		return "帮派战【在帮派战中进行鼓舞】参数：鼓舞类型";
	case eEventType_GuildBattleWeekendEnd:
		return "帮派战【帮派战周结束】参数：我的帮派排名";
	case eEventType_GuildBattleWin:
		return "帮派战【帮派战胜利】";
	case eEventType_GuildBattleComboKill:
		return "灵山争夺战【灵山争夺战连杀】参数：连杀次数";
	case eEventType_GuildBattleJoin:
		return "灵山争夺战【参加帮派战】参数：连杀次数";
	case eEventType_FightingPowerChanging:
		return "战斗力【进入战斗时】参数：队伍战力";
	case eEventType_FightingPowerChangingPlayer:
		return "战斗力【进入战斗时】参数：主角战力";
	case eEventType_FightingPowerChangingAnyFigher:
		return "战斗力【进入战斗】参数：出战散仙战力（4个）";
	case eEventType_FriendAdding:
		return "好友【成功添加好友后】参数：好友数量";
	case eEventType_FriendRecommendUsing:
		return "好友【使用好友推荐后】参数：1";
	case eEventType_FriendSignatureChangings:
		return "好友【修改个性签名成功】参数：1";
	case eEventType_VipLevelChanging:
		return "vip【Vip等级发生变化】参数：Vip等级";
	case eEventType_VipRechargeSuccess:
		return "vip【玩家成功充值】参数：仙石数量";
	case eEventType_VipConsumptionSuccess:
		return "vip【玩家成功消费】参数：仙石数量";
	case eEventType_VipGetPrize:
		return "vip【玩家领取vip礼包】参数：礼包类型";
	case eEventType_VipGetPrizeMore:
		return "vip【玩家领取vip礼包】参数：礼包类型1每日 2是一次性礼包，礼包等级";
	case eEventType_ActiveValueGetPrize:
		return "活跃度【玩家领取活跃宝箱】参数：宝箱id，今日打开宝箱状态";
	case eEventType_ActivePointGet:
		return "活跃度【获得活跃度】参数：活跃度值";
	case eEventType_FightingPowerComparing:
		return "变强【玩家进行战力对比】参数：对比方式";
	case eEventType_MallBought:
		return "商城【在商城进行购买】参数：商城类型，道具id，消耗数量，货币类型";
	case eEventType_MallBoughtMomey:
		return "商城【在商城进行购买】参数：道具id，货币类型,货币数量";
	case eEventType_ExChangingMallBought:
		return "兑换【完成兑换】参数：兑换次数，兑换类型，消耗数量，消耗类型";
	case eEventType_SettingsChanging:
		return "设置【设置变更】参数：设置类型（设置面板，屏蔽）";
	case eEventType_SettingsFastShield:
		return "设置【使用快速屏蔽】参数：1";
	case eEventType_SettingsFullScreen:
		return "设置【使用全屏20分钟】参数：1";
	case eEventType_WorldMapMoving:
		return "世界地图【进行世界地图传送】参数：1";
	case eEventType_MailReading:
		return "邮件【邮件查看】参数：1";
	case eEventType_MailReceiving:
		return "邮件【邮件接收附件】参数：1";
	case eEventType_SkillLearning:
		return "技能【技能学习】参数：技能id";
	case eEventType_SkillEquiping:
		return "技能【技能装备】参数：当前装备的技能id";
	case eEventType_SkillUpgrade:
		return "技能【技能升级】参数：技能id，所有已学习技能等级";
	case eEventType_EquipmentStrengthening:
		return "装备【完成装备强化】参数：装备类型，装备等级";
	case eEventType_EquipmentForging:
		return "装备【完成装备铸造】参数：装备类型，装备等级";
	case eEventType_TrumpActive:
		return "法宝【激活法宝】参数：法宝id";
	case eEventType_TrumpEquiping:
		return "法宝【装备法宝】参数：所有装备的法宝id";
	case eEventType_TrumpForging:
		return "法宝【完成法宝祭炼】参数：法宝id，祭炼次数，祭炼等级，其他所有拥有法宝的祭炼等级";
	case eEventType_FighterEnlisted:
		return "散仙【招募散仙】参数：散仙id，当前已招募散仙数，招募散仙状态（散仙id;当前已招募散仙数;招募散仙id,招募散仙id...）";
	case eEventType_FighterLevelUp:
		return "散仙【散仙升级】参数：散仙id，散仙等级，所有已招募散仙等级";
	case eEventType_FighterCuiTi:
		return "散仙【散仙淬体】参数：散仙id，淬体类型，该散仙所有淬体类型的等级";
	case eEventType_FighterSkillUpgrade:
		return "散仙【散仙技能升级】参数：散仙id，散仙技能id，该散仙所有技能等级";
	case eEventType_FighterSkillExchange:
		return "散仙【散仙技能顺序调整】参数：散仙id，散仙技能顺序";
	case eEventType_FighterLearningRecipe:
		return "散仙【散仙学习心法】参数：散仙id，心法id，散仙当前已学习心法数";
	case eEventType_FighterRecipeUpgrade:
		return "散仙【散仙升级心法】参数：散仙id，心法id，该散仙所有心法等级";
	case eEventType_FormationActive:
		return "散仙【激活阵型】参数：阵型id，当前已激活阵型数";
	case eEventType_FormationChange:
		return "散仙【阵型调整】参数：所有出战散仙的id";
	case eEventType_PetActive:
		return "散仙【激活阵灵】参数：阵灵id，当前已激活阵灵数";
	case eEventType_PetGetFighting:
		return "散仙【出战阵灵】参数：阵灵id";
	case eEventType_FighterBatterPoint:
		return "散仙【出战时战斗力】参数：散仙id，战斗力";
	case eEventType_FighterCollected:
		return "散仙【招募指定品质散仙数量】参数：color,数量";
	case eEventType_FighterStarCollected:
		return "散仙【招募指定星级散仙数量】参数：星级,数量";
	case eEventType_FighterInBattle:
		return "散仙【上阵散仙数量-含主角】参数：数量";
	case eEventType_FormationChangeMore:
		return "散仙【阵型详细调整】参数：所有出战散仙的id，位置id";
	case eEventType_FighterCombinationUnlock:
		return "散仙【激活组合】参数：组合id";
	case eEventType_PetUpgrade:
		return "阵灵【阵灵培养成功】参数：阵灵id，阵灵等级,所有已激活阵灵阶数";
	case eEventType_BeastSoulActive:
		return "阵灵【兽魂激活】参数：兽魂id";
	case eEventType_BeastUpgrade:
		return "阵灵【兽魂升级】参数：兽魂类型，等级,阶位,所有兽魂类型等级,阶位";
	case eEventType_BeastSoulGet:
		return "兽魂【获得兽魂】参数：兽魂id，值";
	case eEventType_HorseActive:
		return "坐骑【激活坐骑】参数：坐骑id，当前已激活坐骑数";
	case eEventType_HorseGetUsed:
		return "坐骑【出战坐骑】参数：坐骑id";
	case eEventType_HorseUpgrade:
		return "坐骑【坐骑进阶成功】参数：坐骑id，坐骑阶数，其他所有已激活坐骑阶数";
	case eEventType_PlayerLearningRecipe:
		return "主角心法【主角学习心法】参数：心法id，主角当前已学习心法数";
	case eEventType_PlayerEquipingRecipe:
		return "主角心法【主角装备心法】参数：心法id，主角当前所有装备心法id";
	case eEventType_PlayerRecipeUpgrade:
		return "主角心法【主角心法升级】参数：心法id，所有已学习心法等级";
	case eEventType_PlayerDujieSuccess:
		return "渡劫【主角或散仙渡劫成功】参数：单位id，渡劫等级，所有已招募散仙渡劫等级（渡劫散仙id;渡劫等级;散仙id,散仙等级$散仙id,散仙等级...）";
	case eEventType_OnlineTime:
		return "在线【每在线1分钟时】参数：1";
	case eEventType_FaionActive:
		return "时装【激活时装】参数：时装id，当前已激活时装数";
	case eEventType_FaionGetUsed:
		return "时装【装备时装】参数：时装id";
	case eEventType_FaionUpgrade:
		return "时装【时装炼化成功】参数：时装id，所有已激活时装阶数";
	case eEventType_StoveFireLearning:
		return "九疑鼎【学会配方】参数：配方Id，配方可使用次数";
	case eEventType_StoveFireFinish:
		return "九疑鼎【完成炼取】参数：配方Id，已领取次数，配方可使用次数";
	case eEventType_StoveUpgrade:
		return "九疑鼎【九疑鼎培养成功】参数：九疑鼎Id，该九疑鼎阶数，所有九疑鼎阶数";
	case eEventType_StovePlayerHelp:
		return "九疑鼎【进行九疑鼎协助】参数：1";
	case eEventType_StoveFighterHelp:
		return "九疑鼎【进行散仙协助】参数：1";
	case eEventType_StoveBellow:
		return "九疑鼎【进行九疑鼎煽火】参数：1";
	case eEventType_StoveComingIn:
		return "九疑鼎【成功入鼎】参数：入鼎道具Id，入鼎道具数量";
	case eEventType_StoveFireStarting:
		return "九疑鼎【祈火成功】参数：配方Id，火种品质，配方可使用次数";
	case eEventType_NewPlayerTask:
		return "任务【新手引导】参数任务Id";
	case eEventType_NewPlayerClient:
		return "任务【新手引导】参数 任务步骤string";
	case eEventType_CircleTaskFinish:
		return "环任务【完成环任务】参数：次数";
	case eEventType_CircleTaskStarUp:
		return "环任务【环任务升星】参数：星级, 升星次数";
	case eEventType_TravelFinish:
		return "游历【完成游历】参数： 游历类型，游历次数";
	case eEventType_GuardEmeiFinish:
		return "锁仙台【完成锁仙台】参数： 关卡Id";
	case eEventType_GuardEmeiFinishMore:
		return "锁仙台战力【完成锁仙台】参数： 关卡Id,玩家战斗力";
	case eEventType_QQAlarmClock:
		return "QQ闹钟【开启QQ闹钟】参数： 结果（1-开启成功 2-开启失败）";
	case eEventType_BeautyUnlock:
		return "仙女【解锁仙女】参数： 仙女Id";
	case eEventType_BeautyUnlockNum:
		return "仙女【解锁仙女数量】参数： 总数";
	case eEventType_BeautyHug:
		return "仙女【完成缠绵】参数： 缠绵次数";
	case eEventType_BeautySend:
		return "仙女【完成赠送】参数： 完成赠送仙女数量";
	case eEventType_BeautySendAppreciate:
		return "仙女喜好品赠送【完成赠送】参数： 非喜欢礼物增加值，喜欢礼物增加值log";
	case eEventType_BeautyLevelUp:
		return "仙女升级【仙女升级】参数： 美女id，美女等级";
	case eEventType_BattleArraySuccess:
		return "破阵【成功破阵或完成扫荡】参数： 阵位Id，次数";
	case eEventType_BattleArraySuccessInfo:
		return "破阵【成功破阵】参数： 阵位Id，战斗力";
	case eEventType_TreasureUseBuff:
		return "寻宝【寻宝使用Buff】参数： BuffId，次数";
	case eEventType_TreasureSuccess:
		return "寻宝【寻宝成功次数】参数： 关卡Id，次数";
	case eEventType_XinfaLearn:
		return "心法【心法习得】参数： 心法id";
	case eEventType_XinfaLevelUp:
		return "心法【心法升级】参数： 心法id,占位，等级";
	case eEventType_BoatFinish:
		return "元江金船【完成运船】参数： 品质，次数";
	case eEventType_BoatRefresh:
		return "元江金船【刷新得到船】参数： 品质，次数";
	case eEventType_BoatRob:
		return "元江金船【打劫】参数： 结果（胜败 1-失败 2-胜利），次数";
	case eEventType_BoatProtect:
		return "元江金船【护送】参数：次数";
	case eEventType_BoatBegin:
		return "元江金船【开始运船】参数：1";
	case eEventType_BoatGet:
		return "元江金船【获得宝船】参数：1";
	case eEventType_MoneyTree:
		return "摇钱树【摇钱】参数： 次数";
	case eEventType_LingMountainSeize:
		return "灵山争夺战【占领】参数： 灵山（峨嵋-1，昆仑-2，黄山-3），占领次数";
	case eEventType_LingMountainJoin:
		return "灵山争夺战【参加】参数： 灵山（峨嵋-1，昆仑-2，黄山-3），参加次数";
	case eEventType_LingMountainConquer:
		return "灵山争夺战【攻破山门】参数： 灵山（峨嵋-1，昆仑-2，黄山-3）,所用时间";
	case eEventType_LingMountainWin:
		return "灵山争夺战【有帮派资源达到3000】参数： 内城（峨嵋洞-1，昆仑洞-2，黄山洞-3）,所用时间";
	case eEventType_GemsGet:
		return "宝石【得到宝石】参数： 宝石类型，宝石等级";
	case eEventType_GemsSuit:
		return "宝石【全身宝石等级】参数：散仙id，宝石等级,全身宝石等级（第三列）";
	case eEventType_GemsCompose:
		return "宝石【宝石合成】参数：1";
	case eEventType_MysteryTreasureJoin:
		return "秘境寻宝【参加秘境寻宝】参数： 1";
	case eEventType_MysteryTreasureBox:
		return "秘境寻宝【获得秘境宝箱】参数： 1";
	case eEventType_MysteryTreasureWin:
		return "秘境寻宝【和夺宝者战斗】参数：是否战胜，是宝匣持有者（1为是）";
	case eEventType_MysteryTreasureMove:
		return "秘境寻宝【秘境寻宝中移动】参数：轮数";
	case eEventType_MysteryTreasureAliveTime:
		return "秘境寻宝【秘境寻宝中失败】参数：存活回合数";
	case eEventType_MysteryTreasureReport:
		return "秘境寻宝【秘境寻宝中结束】参数：获得宝箱数量，机缘值，存活回合数";
	case eEventType_QuestionJoin:
		return "天问【参加天问】参数：1";
	case eEventType_QuestionUseSkill:
		return "天问【天问中使用技能】参数：技能Id";
	case eEventType_QuestionScore:
		return "天问【天问结束】参数：玩家积分";
	case eEventType_SkyTreasureJoin:
		return "天赐宝藏【参加天赐宝藏】参数：1";
	case eEventType_SkyTreasureGet:
		return "天赐宝藏【获得天赐宝藏】参数：宝箱Id";
	case eEventType_PlayerDraw:
		return "求签【进行求签】参数：求签类型1银币2高级";
	case eEventType_GetEnergy:
		return "仙气充盈【领取仙气充盈】参数：1";
	case eEventType_CheckIn:
		return "签到【进行签到】参数：本月已签到次数";
	case eEventType_CheckInAdd:
		return "签到【进行补签】参数：1";
	case eEventType_CheckInGetPrize:
		return "签到【领取签到奖励】参数：奖励Id";
	case eEventType_MonthCard:
		return "月卡【购买月卡】参数：1";
	case eEventType_MonthCardSend:
		return "月卡【给他人赠送月卡】参数：1";
	case eEventType_14DaysGift:
		return "14天礼包【领取14天礼包】参数：礼包Id";
	case eEventType_YellowDiamondNum:
		return "黄钻玩家人数【创角成功】参数：1";
	case eEventType_YellowDiamondGift:
		return "黄钻礼包【领取黄钻礼包】参数：礼包Id";
	case eEventType_SitDownTime:
		return "上次打坐时间【完成打坐】参数：上次打坐时间";
	case eEventType_UsePromote:
		return "使用变强功能【从变强界面打开其他界面】参数：1";
	case eEventType_QQAlarmGift:
		return "QQ提醒礼包【领取QQ提醒礼包】参数：1";
	case eEventType_WeiBoGift:
		return "微博礼包【领取微博礼包】参数：礼包Id";
	case eEventType_WeChatGift:
		return "微信礼包【领取微信礼包】参数：礼包Id";
	case eEventType_FriendInviteGift:
		return "邀请好友【领取邀请好友礼包】参数：礼包Id";
	case eEventType_XiHeTruck:
		return "羲和神车帮助别人的次数【每当帮助别人完成装箱】 参数：1";
	case eEventType_TrumpGet:
		return "新法宝【法宝、法宝碎片获得】参数：法宝、碎片id";
	case eEventType_TrumpEquip:
		return "新法宝【法宝装备】参数：法宝id、散仙id，身上所有法宝id";
	case eEventType_TrumpToStrongSucess:
		return "新法宝【法宝强化成功】参数：强化等级、强化石id、法宝id";
	case eEventType_TrumpToStrongFaild:
		return "新法宝【法宝强化失败】参数：强化等级、强化石id、法宝id";
	case eEventType_TrumpPu:
		return "新法宝【法宝洗炼】参数：保护个数、法宝id";
	case eEventType_TrumpDes:
		return "新法宝【法宝分解】参数：法宝id、强化等级";
	case eEventType_ItemUpgrade:
		return "合成【合成】参数：合成id";
	case eEventType_ShenglingPlay:
		return "圣陵【掷骰子】参数：触发格子类型，格子id、当前层";
	case eEventType_ShenglingControl:
		return "圣陵【遥控骰子】参数：触发格子类型，格子id、当前层";
	case eEventType_ShenglingReturn:
		return "圣陵【转向】参数：格子id，当前层";
	case eEventType_ShenglingThreeGameOver:
		return "圣陵【三消游戏结束】参数：玩家积分";
	case eEventType_ShenglingPuzzOver:
		return "圣陵【拼图游戏结束】参数：拼图是否完成";
	case eEventType_Max:
		return "最大值";
	default:
		return "未知错误";
	}
}

} //namespace NEventCenter
